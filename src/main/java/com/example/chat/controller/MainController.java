package com.example.chat.controller;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.servlet.http.HttpServletRequest;

import com.example.chat.entity.User;
import com.example.chat.entity.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
    private EntityManager entityManager;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setCreatedAt(new Date());
		n.setUpdatedAt(new Date());
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		Iterable<User> users = userRepository.findAll();
        System.out.println("*** List of all Users *** ");
        for(User user : users)
        {
            System.out.println("User Id   :"+user.getId());
            System.out.println("User Name :"+user.getName());
            System.out.println("User Name :"+user.getEmail());
           

        }
        System.out.println("*************************************");

		
		// This returns a JSON or XML with the users
		return users;
	}
	
	/*@GetMapping(path="/{id}")
	public @ResponseBody Optional<User> user (@PathVariable int id) {
		// This returns a JSON or XML with the users
		return userRepository.findById(id);
		
	}*/
	
	@GetMapping(path="/{id}")
	public @ResponseBody Optional<User> user(@PathVariable int id) {
		// This returns a JSON or XML with the users
		User user = userRepository.findById(id).orElse(new User());
		System.out.println(user.getId());
		System.out.println(user.getEmail());
		
		return userRepository.findById(id);
		
	}
	
	@GetMapping(path="/request-body")
	public @ResponseBody String requestBodyTest(HttpServletRequest request) {
		// This returns a JSON or XML with the users
		return request.getParameter("id");
	}
	
	@SuppressWarnings("unchecked")
	@GetMapping(path="/all/em")
	public @ResponseBody Iterable<User> getAllUsersByEM() {
  		
		try {
			String sql = "Select u from User u";
			Query query = entityManager.createQuery(sql, User.class);
			
			return query.getResultList();
		} catch (NoResultException e) {
			return null;
		}
	
	}
}
